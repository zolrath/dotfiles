###############################################################
# This configuration file lets you
# - define new commands
# - change the shortcut or triggering keys of built-in verbs
# - change the colors
# - set default values for flags
# - set special behaviors on specific paths
# - and more...
#
# Configuration documentation is available at
#     https://dystroy.org/broot
#
# This file's format is Hjson ( https://hjson.github.io/ ). Some
# properties are commented out. To enable them, remove the `#`.
#
###############################################################

###############################################################
# Default flags
# You can set up flags you want broot to start with by
# default, for example `default_flags="ihp"` if you usually want
# to see hidden and gitignored files and the permissions (then
# if you don't want the hidden files you can launch `br -H`)
# A popular flag is the `g` one which displays git related info.
#
# default_flags:

###############################################################
# Date/Time format
# If you want to change the format for date/time, uncomment the
# following line and change it according to
# https://docs.rs/chrono/0.4.11/chrono/format/strftime/index.html
#
# date_time_format: %Y/%m/%d %R

###############################################################
# uncomment to activate modal mode
#
# (you really should read https://dystroy.org/broot/modal/
# before as it may not suit everybody even among vim users)
#
# modal: true

###############################################################
# Whether to mark the selected line with a triangle
#
show_selection_mark: true

###############################################################
# Column order
# cols_order, if specified, must be a permutation of the following
# array. You should keep the name column at the end as it has a
# variable length.
#
# cols_order: [
#     mark
#     git
#     size
#     permission
#     date
#     count
#     branch
#     name
# ]

###############################################################
# True Colors
# If this parameter isn't set, broot tries to automatically
# determine whether true colors (24 bits) are available.
# As this process is unreliable, you may uncomment this setting
# and set it to false or true if you notice the colors in
# previewed images are too off.
#
# true_colors: false

###############################################################
# Icons
# If you want to display icons in broot, uncomment this line
# (see https://dystroy.org/broot/icons for installation and
# troubleshooting)
#
# icon_theme: vscode

###############################################################
# Special paths
# If some paths must be handled specially, uncomment (and change
# this section as per the examples)
#
special_paths: {
    "/media" : "no-enter" // comment it if desired
    # "/media/slow-backup-disk"    : no-enter
    # "/home/dys/useless"    : hide
    # "/home/dys/my-link-I-want-to-explore"    : enter
}

###############################################################
# Quit on last cancel
# You can usually cancel the last state change on escape.
# If you want the escape key to quit broot when there's nothing
# to cancel (for example when you just opened broot), uncomment
# this parameter
# 
# quit_on_last_cancel: true

###############################################################
# Search modes
#
# broot allows many search modes.
# A search mode is defined by
# - the way to search: 'fuzzy', 'exact', 'regex', or 'tokens'.
# - where to search: file 'name', 'path', or file 'content'
# A search pattern may for example be "fuzzy path" (default),
# "regex content" or "exact path".
#
# The search mode is selected from its prefix. For example, if
# you type "abc", the default mode is "fuzzy path". If you type
# "/abc", the mode is "regex path". If you type "rn/abc", the mode
# is "regex name".
#
# This mapping may be modified. You may want to dedicate the
# empty prefix (the one which doesn't need a '/') to the
# search mode you use most often. The example below makes it
# easy to search on name rather than on the subpath.
#
# More information on
#  https://dystroy.org/broot/input/#the-filtering-pattern
#
# search_modes: {
#     <empty>: fuzzy name
#     /: regex name
# }

  ###############################################################
	# Verbs and shortcuts
	# You can define your own commands which would be applied to
	# the selection.
	# You'll also find below verbs that you can customize or enable.
	verbs: [

		# Exemple 1: launching `tail -n` on the selected file (leaving broot)
		# {
		# 	name: tail_lines
		# 	invocation: tl {lines_count}
		# 	execution: "tail -f -n {lines_count} {file}"
		# }

		# Exemple 2: creating a new file without leaving broot
		# {
		# 	name: touch
		# 	invocation: touch {new_file}
		# 	execution: "touch {directory}/{new_file}"
		# 	leave_broot: false
		# }

		# A standard recommended command for editing files, that you
		# can customize.
		# If $EDITOR isn't set on your computer, you should either set it using
		#  something similar to
		#   export EDITOR=nvim
		#  or just replace it with your editor of choice in the 'execution'
		#  pattern.
		#  If your editor is able to open a file on a specific line, use {line}
		#   so that you may jump directly at the right line from a preview.
		# Example:
		#  execution: nvim +{line} {file}
		{
			invocation: edit
			key: F2
			shortcut: e
			execution: "$EDITOR +{line} {file}"
			leave_broot: false
		}

		# A convenient shortcut to create new text files in
		# the current directory or below
		{
			invocation: create {subpath}
			execution: "$EDITOR {directory}/{subpath}"
			leave_broot: false
		}

		{
			invocation: git_diff
			shortcut: gd
			leave_broot: false
			execution: "git difftool -y {file}"
		}

		# This verb lets you launch a terminal on ctrl-T
		# (on exit you'll be back in broot)
		{
			invocation: terminal
			key: ctrl-t
			execution: "$SHELL"
			set_working_dir: true
			leave_broot: false
		}

		# Here's an example of a shorctut bringing you to your home directory
		# {
		# 	invocation: home
		# 	key: ctrl-home
		# 	execution: ":focus ~"
		# }

		# A popular set of shorctuts for going up and down:
		#
		# {
		# 	key: ctrl-k
		# 	execution: ":line_up"
		# }
		# {
		# 	key: ctrl-j
		# 	execution: ":line_down"
		# }
		# {
		# 	key: ctrl-u
		# 	execution: ":page_up"
		# }
		# {
		# 	key: ctrl-d
		# 	execution: ":page_down"
		# }

		# If you develop using git, you might like to often switch
		# to the git status filter:
		# {
		# 	key: ctrl-g
		# 	execution: ":toggle_git_status"
		# }

		# You can reproduce the bindings of Norton Commander
		# on copying or moving to the other panel:
		#
		# {
		# 	key: F5
		# 	execution: ":copy_to_panel"
		# }
		# {
		# 	key: F6
		# 	execution: ":move_to_panel"
		# }

		# always open with editor
		{
			key: enter
			execution: "$EDITOR {file}"
			leave_broot: false
			apply_to: "file"
		}

		# vim-like navigation
		{
			key: ctrl-j
			internal: ":line_down"
		}
		{
			key: ctrl-k
			internal: ":line_up"
		}
		{
			key: ctrl-h
			internal: ":up_tree"
		}
		{
			key: ctrl-l
			internal: ":focus"
		}

                # switch panels on macOS
		{
			key: alt-Left
			internal: ":panel_left"
		}
		{
			key: alt-Right
			internal: ":panel_right"
		}
		{
			key: alt-[
			internal: ":panel_left"
		}
		{
			key: alt-Right
			internal: ":panel_right"
		}
	]

###############################################################
# File Extension Colors
#
# uncomment and modify the next section if you want to color
# file name depending on their extension
#
# ext_colors: {
#     png: rgb(255, 128, 75)
#     rs: yellow
# }

###############################################################
# Max file size for content search
#
# Bigger files are ignored when searching their content. You
# can specify this size either in ISO units (eg 5GB) or in
# the old binary units (eg 44Kib)
content_search_max_file_size: 10MB

###############################################################
# Max Panels Count
#
# Change this if you sometimes want to have more than 2 panels
# open
# max_panels_count: 2

###############################################################
# Imports
#
# While it's possible to have all configuration in one file,
# it's more convenient to split it in several ones.
# Importing also allows to set a condition on the terminal's
# color, which makes it possible to have a different skin 
# chosen when your terminal has a light background and when
# it has a light one.
imports: [

    # Verbs are better configured in verbs.hjson. But you
    # can also add another files for your personal verbs
    verbs.hjson

    # This file contains the skin to use when the terminal
    # is dark (or when this couldn't be determined)
    {
        luma: [
            dark
            unknown
        ]
        file: dark-blue-skin.hjson
    }

    # This skin is imported when your terminal is light
    {
        luma: light
        file: white-skin.hjson
    }
]
