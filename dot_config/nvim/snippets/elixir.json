{
  "inspect": {
    "prefix": "lin",
    "body": [
      "IO.inspect($1, label: \"$1 ($RELATIVE_FILEPATH:#{__ENV__.line})\")"
    ],
    "description": "IO.inspect"
  },
  "pipe_inspect": {
    "prefix": "pin",
    "body": [
      "|> IO.inspect(label: \"$1 ($RELATIVE_FILEPATH:#{__ENV__.line})\")"
    ],
    "description": "IO.inspect in a pipeline"
  },
  "log_inspect": {
    "prefix": "logi",
    "body": [
      "Logger.info(\"$1: #{inspect($1, pretty:true)} ($RELATIVE_FILEPATH:#{__ENV__.line})\")"
    ],
    "description": "Logger.info with informaion"
  },
  "key": {
    "prefix": "k",
    "body": [
      "$1: $1"
    ],
    "description": "Key for key value list with same name."
  },
  "key_string": {
    "prefix": "ks",
    "body": [
      "\"$1\" => $1"
    ],
    "description": "String key for key value list with same name."
  },
  "key_get": {
    "prefix": "kget",
    "body": [
      "$1: Keyword.get(opts, :$1)"
    ],
    "description": "Get key from keyword list"
  },
  "start_link": {
    "prefix": "start_link",
    "body": [
      "def start_link(opts \\\\\\ []) do",
      "    GenServer.start_link(__MODULE__, opts, name: __MODULE__)",
      "end"
    ],
    "description": "Generic start_link GenServer function"
  },
  "hev": {
    "prefix": "hev",
    "description": "Handle event",
    "body": [
      "@impl Phoenix.LiveView",
      "def handle_event($1, ${2:_params}, socket) do",
      "  socket =",
      "    assign(socket,",
      "      key: value",
      "    )",
      "",
      "  {:noreply, socket}",
      "end"
    ]
  },
  "hin": {
    "prefix": "hin",
    "description": "Handle info",
    "body": [
      "def handle_info($1, ${2:socket}) do",
      "  socket =",
      "    assign(socket,",
      "      key: value",
      "    )",
      "",
      "  {:noreply, ${2:socket}}",
      "end"
    ]
  },
  "lv_mount": {
    "prefix": "mount",
    "body": [
      "def mount(_params, _session, socket) do",
      "  socket = assign(socket, ${1:key}: ${2:value})",
      "  {:ok, socket}",
      "end"
    ],
    "description": "LiveView mount function"
  },
  "lv_rend": {
    "prefix": "rend",
    "body": [
      "def render(assigns) do",
      "  ~H\"\"\"",
      "  ${0}",
      "  \"\"\"",
      "end"
    ],
    "description": "LiveView render function"
  },
  "lv_handle_event": {
    "prefix": "he",
    "body": [
      "def handle_event(\"${1:event}\", _params, socket) do",
      "  socket = assign(socket, ${2:key}: ${3:value})",
      "  {:noreply, socket}",
      "end"
    ],
    "description": "LiveView handle_event function"
  },
  "lv_handle_info": {
    "prefix": "hi",
    "body": [
      "def handle_info(${1:message}, socket) do",
      "  socket = assign(socket, ${2:key}: ${3:value})",
      "  {:noreply, socket}",
      "end"
    ],
    "description": "LiveView handle_info function"
  },
  "lv_handle_params": {
    "prefix": "hp",
    "body": [
      "def handle_params(params, _url, socket) do",
      "  {:noreply, socket}",
      "end"
    ],
    "description": "LiveView handle_params function"
  },
  "lc_mount": {
    "prefix": "lc_mount",
    "description": "LiveComponent mount function",
    "body": [
      "@impl Phoenix.LiveComponent",
      "def mount(socket) do",
      "    {:ok, assign(socket, $1: $2)}",
      "end"
    ]
  },
  "lc_update": {
    "prefix": "lc_update",
    "description": "LiveComponent update function",
    "body": [
      "@impl Phoenix.LiveComponent",
      "def update(assigns, socket) do",
      "    socket = assign(socket, assigns)",
      "    $1",
      "    {:ok, socket}",
      "end"
    ]
  },
  "ee": {
    "prefix": "ee",
    "description": "Embedded Elixir",
    "body": [
      "<%= $1 %>"
    ]
  },
  "rs": {
    "prefix": "rs",
    "description": "Render slot in LiveComponent",
    "body": [
      "<%= render_slot(@$1) %>"
    ]
  },
  "rsi": {
    "prefix": "rsi",
    "description": "Render slot of inner block",
    "body": [
      "<%= render_slot(@inner_block) %>"
    ]
  }
}
