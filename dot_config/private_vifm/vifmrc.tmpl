" vim: filetype=vifm :

" Custom Mappings [[[
nnoremap t tj
nnoremap T t
" ]]]

" Marks [[[
" :mark mark /full/directory/path [filename]

mark d ~/.local/share/chezmoi/
mark c ~/code/
mark b ~/bin/
mark h ~/

" ]]]

" ------------------------------------------------------------------------------

" Commands [[[
" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments
" %c the current file under the cursor
" %C the current file under the cursor in the other directory
" %f the current selected file, or files
" %F the current selected file, or files in the other directory
" %b same as %f %F
" %d the current directory name
" %D the other window directory name
" %m run the command in a menu window

command! df df -h %a %m 2> /dev/null
command! diff delta %a %b
command! vdiff nvim -d %a %b
command! make !!make %a
command! run !!./%f %a
command! mkcd :mkdir -p %a | cd %a
command! reload :write | restart full

" Write the current bookmarks to a file (same as EvilDroidMax)
command! fzfreadbmarks :exe "normal! :bmarks\r:write ~/.config/vifm/fzf-read/bookmarks\rq"

" Fzf through bookmarks
{{ if eq .chezmoi.os "darwin" -}}
if $TMUX
    " Use popup window. Requires tmux 3.2 and up
    command! fzfbmarks :execute 'cd "'.system('cat ~/.config/vifm/fzf-read/bookmarks | fzf-tmux -p 90,30 | sed "s/:.*//" ').'"'
    command! fdcddir :execute 'cd "'.system('fd -HE ''.git'' -t d . | fzf-tmux -p 90,30').'"'
    command! fdeditfiles :execute 'edit "'.system('fd -HE ''.git'' -t f . | fzf-tmux -p 90,30').'"'
else
    " Use full-screen. Works even without tmux
    command! fzfbmarks :execute 'cd "'.term('cat ~/.config/vifm/fzf-read/bookmarks | fzf 2>/dev/tty | sed "s/:.*//" ').'"'
    command! fdcddir :execute 'cd "'.term('fd -HE ''.git'' -t d . | fzf 2>/dev/tty').'"'
    command! fdeditfiles :execute 'edit "'.term('fd -HE ''.git'' -t f . | fzf 2>/dev/tty').'"'
endif
{{ else if eq .chezmoi.os "linux" -}}
if $TMUX
    " Use popup window. Requires tmux 3.2 and up
    command! fzfbmarks :execute 'cd "'.system('cat ~/.config/vifm/fzf-read/bookmarks | fzf-tmux -p 90,30 | sed "s/:.*//" ').'"'
    command! fdcddir :execute 'cd "'.system('fdfind -HE ''.git'' -t d . | fzf-tmux -p 90,30').'"'
    command! fdeditfiles :execute 'edit "'.system('fdfind -HE ''.git'' -t f . | fzf-tmux -p 90,30').'"'
else
    " Use full-screen. Works even without tmux
    command! fzfbmarks :execute 'cd "'.term('cat ~/.config/vifm/fzf-read/bookmarks | fzf 2>/dev/tty | sed "s/:.*//" ').'"'
    command! fdcddir :execute 'cd "'.term('fdfind -HE ''.git'' -t d . | fzf 2>/dev/tty').'"'
    command! fdeditfiles :execute 'edit "'.term('fdfind -HE ''.git'' -t f . | fzf 2>/dev/tty').'"'
endif
{{ end -}}

  " Read in latests bookmarks before fzfinding through them
command! fzfmarks :fzfreadbmarks | fzfbmarks
" ]]]

" ------------------------------------------------------------------------------

" Mappings [[[

  " fzfind bookmarks
nnoremap <space>r :fzfmarks<cr>
  " cd to child directory
nnoremap <space>e :fdcddir<cr>
  " edit file from child directory in vim
nnoremap <space>f :fdeditfiles<cr>
nnoremap <space><tab> :tabnew<cr>
nnoremap H :tabprev<cr>
nnoremap L :tabnext<cr>
nnoremap <space>bd :tabclose<cr>
nnoremap <space> <nop>

" Start shell in current directory
nnoremap S :shell<CR>

" Start terminal in current directory
nnoremap T :!wezterm start --cwd %d &<CR>

" Display sorting dialog
nnoremap s :sort<CR>

" Toggle wrap setting
nnoremap W :set wrap!<CR>

" Toggle visibility of preview window
nnoremap w :view<CR>
vnoremap w :view<CR>gv

" Yank current directory path into the clipboard
nnoremap yd :!printf -- %d | xclip -sel c %i<CR>

" Yank current file path into the clipboard
nnoremap yf :!printf -- %c:p | xclip -sel c %i<CR>

" Yank current file contents into the clipboard
nnoremap yc :!xlip -sel c -i %c %i<CR>

" Open filetype dialog
nnoremap o :file<CR>

" Quit vifm
nnoremap q :quit<CR>
" ]]]





" ------------------------------------------------------------------------------

" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros like %f, %F, %d, %D may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.

" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
fileviewer {*.py,*.json,*.xml,*.md,*.html,*.go,*.css,*.ex,*.exs,*.html.heex} bat --color always --wrap never --pager never %c -p

" Pdf
filextype {*.pdf},<application/pdf> zathura %c %i &, apvlv %c, xpdf %c
fileviewer {*.pdf},<application/pdf> pdftotext -nopgbrk %c -

" PostScript
filextype {*.ps,*.eps,*.ps.gz},<application/postscript>
        \ {View in zathura}
        \ zathura %f,
        \ {View in gv}
        \ gv %c %i &,

" Djvu
filextype {*.djvu},<image/vnd.djvu>
        \ {View in zathura}
        \ zathura %f,
        \ {View in apvlv}
        \ apvlv %f,

" Audio
filetype {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus},
        \<audio/*>
       \ {Play using ffplay}
       \ ffplay -nodisp -autoexit %c,
       \ {Play using MPlayer}
       \ mplayer %f,
fileviewer {*.mp3},<audio/mpeg> mp3info
fileviewer {*.flac},<audio/flac> soxi

" Video
filextype {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
          \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
          \*.as[fx]},
         \<video/*>
        \ {View using ffplay}
        \ ffplay -fs -autoexit %f,
        \ {View using Dragon}
        \ dragon %f:p,
        \ {View using mplayer}
        \ mplayer %f,
fileviewer {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
           \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
           \*.as[fx]},
          \<video/*>
         \ ffprobe -pretty %c 2>&1

" Web
filextype {*.html,*.htm},<text/html>
        \ {Open with dwb}
        \ dwb %f %i &,
        \ {Open with firefox}
        \ firefox %f &,
        \ {Open with uzbl}
        \ uzbl-browser %f %i &,
filetype {*.html,*.htm},<text/html> links, lynx

" Object
filetype {*.o},<application/x-object> nm %f | less

" Man page
filetype {*.[1-8]},<text/troff> man ./%c
fileviewer {*.[1-8]},<text/troff> man ./%c | col -b

" Images
filextype {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
        \ {View in sxiv}
        \ sxiv %f,
        \ {View in gpicview}
        \ gpicview %c,
        \ {View in shotwell}
        \ shotwell,
fileviewer {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
         \ identify %f

" OpenRaster
filextype *.ora
        \ {Edit in MyPaint}
        \ mypaint %f,

" Mindmap
filextype *.vym
        \ {Open with VYM}
        \ vym %f &,

" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

" GPG signature
filetype {*.asc},<application/pgp-signature>
       \ {Check signature}
       \ !!gpg --verify %c,

" Torrent
filetype {*.torrent},<application/x-bittorrent> ktorrent %f &
fileviewer {*.torrent},<application/x-bittorrent> dumptorrent -v %c

" FuseZipMount
filetype {*.zip,*.jar,*.war,*.ear,*.oxt,*.apkg},
        \<application/zip,application/java-archive>
       \ {Mount with fuse-zip}
       \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
       \ {View contents}
       \ zip -sf %c | less,
       \ {Extract here}
       \ tar -xf %c,
fileviewer *.zip,*.jar,*.war,*.ear,*.oxt zip -sf %c

" ArchiveMount
filetype {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.tar.zst,*.tzst},
        \<application/x-tar>
       \ {Mount with archivemount}
       \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.xz,*.txz tar -tJf %c
fileviewer *.tar.zst,*.tzst tar -t --zstd -f %c
fileviewer {*.tar},<application/x-tar> tar -tf %c

" Rar2FsMount and rar archives
filetype {*.rar},<application/x-rar>
       \ {Mount with rar2fs}
       \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,
fileviewer {*.rar},<application/x-rar> unrar v %c

" IsoMount
filetype {*.iso},<application/x-iso9660-image>
       \ {Mount with fuseiso}
       \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

" SshMount
filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,

" FtpMount
filetype *.ftp
       \ {Mount with curlftpfs}
       \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,

" Fuse7z and 7z archives
filetype {*.7z},<application/x-7z-compressed>
       \ {Mount with fuse-7z}
       \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
fileviewer {*.7z},<application/x-7z-compressed> 7z l %c

" Office files
filextype {*.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx,*.ppt},
         \<application/vnd.openxmlformats-officedocument.*,
          \application/msword,
          \application/vnd.ms-excel>
        \ libreoffice %f &
fileviewer {*.doc},<application/msword> catdoc %c
fileviewer {*.docx},
          \<application/
           \vnd.openxmlformats-officedocument.wordprocessingml.document>
         \ docx2txt.pl %f -

" TuDu files
filetype *.tudu tudu -f %c

" Qt projects
filextype *.pro qtcreator %f &

" Directories
filextype */
        \ {View in thunar}
        \ Thunar %f &,

" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
"
" fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

" Displaying pictures in terminal
"
" fileviewer *.jpg,*.png shellpic %c

" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  By default all unknown files are opened with 'vi[x]cmd'
" uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
" for unknown file types.
" For *nix:
" filetype * xdg-open
" For OS X:
" filetype * open
" For Windows:
" filetype * start, explorer %"f &


" remaining files:
fileviewer *[!/] bat --color always --wrap never --pager never %c -p
fileviewer .*[!/] bat --color always --wrap never --pager never %c -p

" folder view
if executable('exa')
  fileviewer */,.*/ exa --tree --icons %c
elseif executable('tree')
  fileviewer */,.*/ tree -L 2 -I .git %c
endif


" GETTING ICONS TO DISPLAY IN VIFM
" Filetypes
set classify=' :dir:/, :exe:, :reg:, :link:,? :?:, ::../::'

" Dirs
set classify+=' ::.git/::/,
             \  ::.config/::/,
             \  ::Desktop/::/,
             \  ::Documents/::/,
             \  ::Development/::/,
             \  ::Downloads/::/,
             \  ::Dropbox/::/,
             \  ::Google\ Drive/::/,
             \  ::gitrepos/::/,
             \  ::Music/::/,
             \  ::Pictures/::/,
             \  ::Public/::/,
             \  ::Templates/::/,
             \  ::Videos/::/,
             \  ::node_modules/::/'

" Files
set classify+=' ::.Xauthority,,.Xdefaults,,.Xresources,,.bash_aliases,,.bashprofile,,.bash_profile,,.bash_logout,,.bash_history,,.bashrc,,.dmrc,,.DS_Store,,.fasd,,.gitconfig,,.gitattributes,,.gitignore,,.inputrc,,.jack-settings,,.mime.types,,.nvidia-settings-rc,,.pam_environment,,.profile,,.recently-used,,.selected_editor,,.tmux.conf,,.xinitrc,,.xinputrc,,config,,bspwmrc,,sxhkdrc,,Makefile,,Makefile.in,,Makefile.ac,,mimeapps.list,,.zshenv,,.zprofile,,.zshrc,,.zlogin,,.zlogout,,vifmrc,,yabairc,,skhdrc,,ini,,user-dirs.dirs::,
             \  ::.fehbg::,
             \  ::.vim,,.vimrc,,.viminfo,,init.vim::,
             \  ::Dockerfile,,docker-compose.yml::,
             \  ::dropbox::,
             \  ::favicon.ico::,
             \  ::a.out,,configure::,
             \  ::config.mk,,config.m4,,config.ac::,
             \  ::Rakefile::,
             \  ::gruntfile.coffee,,gruntfile.js,,gruntfile.ls::,
             \  ::gulpfile.coffee,,gulpfile.js,,gulpfile.ls::,
             \  ::ledger::,
             \  ::package.json,,package-lock.json,,webpack.config.js::,
             \  ::.ncmpcpp,,playlists::,
             \  ::known_hosts,,authorized_keys,,license,,LICENSE.md,,LICENSE,,LICENSE.txt::,
             \  ::procfile::,
             \  ::react.jsx::,
             \  ::README.rst,,README.md,,README.markdown,,README,,README.txt::'

" Extentions
set classify+=' ::*.7z,,*.apk,,*.bz2,,*.cpio,,*.deb,,*.gz,,*.gzip,,*.gem,,*.lha,,*.lzh,,*.lzma,,*.rar,,*.rpm,,*.tar,,*.tgz,,*.xbps,,*.xz,,*.zip::,
             \  ::*.a,,*.cmake,,*.jl,,*.o,,*.so::,
             \  ::*.ai::,
             \  ::*.asm,,*.css,,*.less,,*.s,,*.sh,,*.zsh::,
             \  ::*.asp,,*.rom,,*.efi,,*.elf,,*.fish::,
             \  ::*.aup,,*.cue,,*.flac,,*.m4a,,*.mp3,,*.ogg,,*.wav::,
             \  ::*.avi,,*.flv,,*.m4v,,*.mkv,,*.mov,,*.mp4,,*.mpeg,,*.mpg,,*.webm::,
             \  ::*.bat,,*.conf,,*.cvs,,*.htaccess,,*.htpasswd,,*.ini,,*.rc,,*.yaml,,*.yml::,
             \  ::*.bmp,,*.gif,,*.ico,,*.jpeg,,*.jpg,,*.png,,*.ppt,,*.pptx::,
             \  ::*.c,,*.h::,
             \  ::*.cbr,,*.cbz::,
             \  ::*.class,,*.jar,,*.java::,
             \  ::*.clj,,*.cljc::,
             \  ::*.cljs,,*.edn::,
             \  ::*.coffee::,
             \  ::*.cs::,
             \  ::*.cxx,,*.c++,,*.cc,,*.cp,,*.cpp::,
             \  ::*.d::,
             \  ::*.dart::,
             \  ::*.db,,*.dump,,*.img,,*.iso,,*.sql::,
             \  ::*.diff::,
             \  ::*.dll,,*.exe,,*.msi::,
             \  ::*.doc,,*.docx,,*.epub,,*.pdf,,*.rtf,,*.xls,,*.xlsx::,
             \  ::*.ejs,,*.htm,,*.html,,*.slim,,*.xhtml,,*.xml::,
             \  ::*.elm::,
             \  ::*.erl,,*.hrl::,
             \  ::*.ex,,*.exs,,*.eex::,
             \  ::*.f#,,*.fs,,*.fsi,,*.fsscript,,*.fsx::,
             \ | ::*.fifo::,
             \  ::*.go::,
             \  ::*.hbs,,*.mustache::,
             \  ::*.hs,,*.lhs::,
             \  ::*.js::,
             \  ::*.json::,
             \  ::*.jsx::,
             \  ::*.key,,*.pub::,
             \  ::*.log::,
             \  ::*.lua::,
             \  ::*.markdown,,*.md::,
             \ λ ::*.ml,,*.mli::,
             \  ::*.php::,
             \  ::*.pl,,*.pm,,*.t::,
             \  ::*.psb,,*.psd::,
             \  ::*.py,,*.pyc,,*.pyd,,*.pyo::,
             \  ::*.rb::,
             \  ::*.rlib,,*.rs::,
             \  ::*.rss::,
             \  ::*.scala::,
             \  ::*.scss::,
             \  ::*.sln,,*.suo::,
             \  ::*.styl::,
             \  ::*.ts::,
             \  ::*.twig::,
             \  ::*.vim,,*.vimrc::,
             \  ::*.xul::'
" ------------------------------------------------------------------------------

" What should be saved automatically between vifm sessions.  Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
" set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
"     \phistory,fhistory,dirstack,registers,bookmarks,bmarks

set vifminfo=dhistory,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks
" ------------------------------------------------------------------------------

" Examples of configuring both panels

" Customize view columns a bit (enable ellipsis for truncated file names)
"
" set viewcolumns=-{name}..,6{}.

" Filter-out build and temporary files
"
" filter! {*.lo,*.o,*.d,*.class,*.pyc,*.pyo,.*~}

" ------------------------------------------------------------------------------

" Sample mappings



" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" Open file in existing instance of gvim
nnoremap o :!nvim %f<cr>

" Open file in the background using its default program
nnoremap gb :file &<cr>l

" Interaction with system clipboard
if has('win')
    " Yank current directory path to Windows clipboard with forward slashes
    nnoremap yp :!echo %"d:gs!\!/! %i | clip<cr>
    " Yank path to current file to Windows clipboard with forward slashes
    nnoremap yf :!echo %"c:gs!\!/! %i | clip<cr>
elseif executable('xclip')
    " Yank current directory path into the clipboard
    nnoremap yd :!echo %d | xclip %i<cr>
    " Yank current file path into the clipboard
    nnoremap yf :!echo %c:p | xclip %i<cr>
elseif executable('xsel')
    " Yank current directory path into primary and selection clipboards
    nnoremap yd :!echo -n %d | xsel --input --primary %i &&
                \ echo -n %d | xsel --clipboard --input %i<cr>
    " Yank current file path into into primary and selection clipboards
    nnoremap yf :!echo -n %c:p | xsel --input --primary %i &&
                \ echo -n %c:p | xsel --clipboard --input %i<cr>
endif

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw
nnoremap cW cw
nnoremap cw cW

" Open console in current directory
nnoremap ,t :!xterm &<cr>

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,c :write | edit $MYVIFMRC | restart full<cr>
" Open gvim to edit vifmrc
nnoremap ,C :!gvim --remote-tab-silent $MYVIFMRC &<cr>

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>

" Example of standard two-panel file managers mappings
nnoremap <f3> :!less %f<cr>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

" Midnight commander alike mappings
" Open current directory in the other pane
nnoremap <a-i> :sync<cr>
" Open directory under cursor in the other pane
nnoremap <a-o> :sync %c<cr>

" Swap panes
" "nnoremap <c-u> <c-w>x

" ------------------------------------------------------------------------------

" Various customization examples

" Use ag (the silver searcher) instead of grep
"
" set grepprg='ag --line-numbers %i %a %s'

" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername

" ------------------------------------------------------------------------------

" Base Settings [[[

" Use ripgrep instead of grep
" set grepprg="rg\ --color=never\ -Hn\ %i\ %a\ %s"
" set findprg="rg --files %s | rg %p"
{{ if eq .chezmoi.os "darwin" -}}
" Use fd instead of find
set findprg=fd\ --color=never\ %p\ %s
{{ else if eq .chezmoi.os "linux" -}}
" Use fd instead of find
set findprg=fdfind\ --color=never\ %p\ %s
{{ end -}}

" command to start vim
set vicmd=nvim

" This makes vifm perform file operations on its own
" instead of relying on standard utilities like cp
set syscalls

" Use vim help format
set vimhelp

" When files are deleted they are moved to the trash directory.
" This allows dd and p to move files like in vim, don't remove it.
set trash
set trashdir="~/.local/share/vifm/trash"

" Maximum number of stored items in all histories
set history=100

" Automatically resolve symbolic links on l or Enter.
set nofollowlinks

" With this on you can run partially completed commands
" set fastrun

" Natural sort of (version) numbers within text.
set sortnumbers

" Maximum number of changes that can be undone.
set undolevels=100

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.
set vimhelp

" To run an executable file when you press Enter, l or Right Arrow, set this.
set norunexec

" List of color schemes to try (picks the first one supported by the terminal)
colorscheme dracula

"  Format for displaying time in file list
" See man date or man strftime for details.
set timefmt=%m/%d\ %H:%M

" Show list of matches on tab completion in command-line mode
set wildmenu

" Display completions in a form of popup with descriptions of the matches
set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it has at least one uppercase letter
set ignorecase
set smartcase

" Don't highlight search results automatically
set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists
set scrolloff=8

" Don't do too many requests to slow file systems
if !has('win')
    set slowfs=curlftpfs
endif

" Set custom status line look
set statusline="  Hint: %z%= %A %10u:%-7g %15s %20d  "

" Single pane when started via vim plugin
if $MYVIMRC != '' | only | endif
" ]]]

" ------------------------------------------------------------------------------

