" vim: filetype=vifm :

" Custom Mappings [[[
nnoremap t tj
nnoremap T t
" ]]]

" Marks [[[
" :mark mark /full/directory/path [filename]

mark d ~/.local/share/chezmoi/
mark c ~/code/
mark b ~/bin/
mark h ~/

" ]]]

" ------------------------------------------------------------------------------

" Commands [[[
" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments
" %c the current file under the cursor
" %C the current file under the cursor in the other directory
" %f the current selected file, or files
" %F the current selected file, or files in the other directory
" %b same as %f %F
" %d the current directory name
" %D the other window directory name
" %m run the command in a menu window

command! df df -h %a %m 2> /dev/null
command! diff delta %a %b
command! vdiff nvim -d %a %b
command! make !!make %a
command! run !!./%f %a
command! mkcd :mkdir -p %a | cd %a
command! reload :write | restart full

" Write the current bookmarks to a file (same as EvilDroidMax)
command! fzfreadbmarks :exe "normal! :bmarks\r:write ~/.config/vifm/fzf-read/bookmarks\rq"

" Fzf through bookmarks
{{ if eq .chezmoi.os "darwin" -}}
if $TMUX
    " Use popup window. Requires tmux 3.2 and up
    command! fzfbmarks :execute 'cd "'.system('cat ~/.config/vifm/fzf-read/bookmarks | fzf-tmux -p 90,30 | sed "s/:.*//" ').'"'
    command! fdcddir :execute 'cd "'.system('fd -HE ''.git'' -t d . | fzf-tmux -p 90,30').'"'
    command! fdeditfiles :execute 'edit "'.system('fd -HE ''.git'' -t f . | fzf-tmux -p 90,30').'"'
else
    " Use full-screen. Works even without tmux
    command! fzfbmarks :execute 'cd "'.term('cat ~/.config/vifm/fzf-read/bookmarks | fzf 2>/dev/tty | sed "s/:.*//" ').'"'
    command! fdcddir :execute 'cd "'.term('fd -HE ''.git'' -t d . | fzf 2>/dev/tty').'"'
    command! fdeditfiles :execute 'edit "'.term('fd -HE ''.git'' -t f . | fzf 2>/dev/tty').'"'
endif
{{ else if eq .chezmoi.os "linux" -}}
if $TMUX
    " Use popup window. Requires tmux 3.2 and up
    command! fzfbmarks :execute 'cd "'.system('cat ~/.config/vifm/fzf-read/bookmarks | fzf-tmux -p 90,30 | sed "s/:.*//" ').'"'
    command! fdcddir :execute 'cd "'.system('fdfind -HE ''.git'' -t d . | fzf-tmux -p 90,30').'"'
    command! fdeditfiles :execute 'edit "'.system('fdfind -HE ''.git'' -t f . | fzf-tmux -p 90,30').'"'
else
    " Use full-screen. Works even without tmux
    command! fzfbmarks :execute 'cd "'.term('cat ~/.config/vifm/fzf-read/bookmarks | fzf 2>/dev/tty | sed "s/:.*//" ').'"'
    command! fdcddir :execute 'cd "'.term('fdfind -HE ''.git'' -t d . | fzf 2>/dev/tty').'"'
    command! fdeditfiles :execute 'edit "'.term('fdfind -HE ''.git'' -t f . | fzf 2>/dev/tty').'"'
endif
{{ end -}}

  " Read in latests bookmarks before fzfinding through them
command! fzfmarks :fzfreadbmarks | fzfbmarks
" ]]]

" ------------------------------------------------------------------------------

" Mappings [[[

  " fzfind bookmarks
nnoremap <space>r :fzfmarks<cr>
  " cd to child directory
nnoremap <space>e :fdcddir<cr>
  " edit file from child directory in vim
nnoremap <space>f :fdeditfiles<cr>
nnoremap <space><tab> :tabnew<cr>
nnoremap H :tabprev<cr>
nnoremap L :tabnext<cr>
nnoremap <space>bd :tabclose<cr>
nnoremap <space> <nop>

" Start shell in current directory
nnoremap S :shell<CR>

" Start terminal in current directory
nnoremap T :!wezterm start --cwd %d &<CR>

" Display sorting dialog
nnoremap s :sort<CR>

" Toggle wrap setting
nnoremap W :set wrap!<CR>

" Toggle visibility of preview window
nnoremap w :view<CR>
vnoremap w :view<CR>gv

" Yank current directory path into the clipboard
nnoremap yd :!printf -- %d | xclip -sel c %i<CR>

" Yank current file path into the clipboard
nnoremap yf :!printf -- %c:p | xclip -sel c %i<CR>

" Yank current file contents into the clipboard
nnoremap yc :!xlip -sel c -i %c %i<CR>

" Open filetype dialog
nnoremap o :file<CR>

" Quit vifm
nnoremap q :quit<CR>
" ]]]

" ------------------------------------------------------------------------------

" File types [[[
" The file type is for the default programs to be used with a file extension
" The other programs for the file type can be accessed with the :file command
" The command macros %c, %C, %f, %F, %b, %d, %D may be used in the commands

" Documents [[[
filextype *.pdf,*.epub
    \ {Zathura} zathura %f %i &,
    \ {Okular} okular %f %i &,
    \ {MComix} mcomix %f %i &
filextype *.doc,*.docx,*.odt,*.tmdx
    \ {Calligra} calligrawords %f %i &,
    \ {FreeOffice} freeoffice-textmaker %f %i &
filextype *.ppt,*.pptx,*.odp,*.prdx
    \ {Calligra} calligrastage %f %i &,
    \ {FreeOffice} freeoffice-presentations %f %i &,
filextype *.xls,*.xlsx,*.csv,*.pmdx
    \ {Calligra} calligrasheets %f %i &,
    \ {FreeOffice} freeoffice-planmaker %f %i &
fileviewer *.pdf pdftotext -nopgbrk %c -
fileviewer *.epub pandoc -f epub -t plain %c
fileviewer *.docx pandoc -f docx -t plain %c
fileviewer *.odt pandoc -f odt -t plain %c
fileviewer *.ipynb pandoc -f ipynb -t gfm %c
" ]]]

" Audio [[[
filetype *.aac,
    \*.au,
    \*.axa,
    \*.flac,
    \*.mid,
    \*.midi,
    \*.mka,
    \*.mp3,
    \*.mpc,
    \*.oga,
    \*.ogg,
    \*.ra,
    \*.spx,
    \*.wav,
    \*.xspf
    \ {MPV} mpv %f &
fileviewer *.aac,
    \*.au,
    \*.axa,
    \*.flac,
    \*.mid,
    \*.midi,
    \*.mka,
    \*.mp3,
    \*.mpc,
    \*.oga,
    \*.ogg,
    \*.ra,
    \*.spx,
    \*.wav,
    \*.xspf
    \ ffprobe -hide_banner %c 2>&1
" ]]]

" Videos [[[
filextype *.anx,
    \*.asf,
    \*.avi,
    \*.axv,
    \*.cgm,
    \*.dl,
    \*.emf,
    \*.flc,
    \*.fli,
    \*.flv,
    \*.gl,
    \*.m2v,
    \*.m4v,
    \*.mkv,
    \*.mov,
    \*.mp4,
    \*.mp4v,
    \*.mpeg,
    \*.mpg,
    \*.nuv,
    \*.ogm,
    \*.ogv,
    \*.ogx,
    \*.pak,
    \*.qt,
    \*.rm,
    \*.rmvb,
    \*.vob,
    \*.wmv,
    \*.xcf,
    \*.xwd,
    \*.yuv
    \ {MPV} mpv %f &
fileviewer *.anx,
    \*.asf,
    \*.avi,
    \*.axv,
    \*.cgm,
    \*.dl,
    \*.emf,
    \*.flc,
    \*.fli,
    \*.flv,
    \*.gl,
    \*.m2v,
    \*.m4v,
    \*.mkv,
    \*.mov,
    \*.mp4,
    \*.mp4v,
    \*.mpeg,
    \*.mpg,
    \*.nuv,
    \*.ogm,
    \*.ogv,
    \*.ogx,
    \*.pak,
    \*.qt,
    \*.rm,
    \*.rmvb,
    \*.vob,
    \*.wmv,
    \*.xcf,
    \*.xwd,
    \*.yuv
    \ ffprobe -hide_banner %c 2>&1
" ]]]

" Images [[[
filextype *.apng,
    \*.bmp,
    \*.gif,
    \*.ico,
    \*.icon,
    \*.j2k,
    \*.jp2,
    \*.jpeg,
    \*.jpf,
    \*.jpg,
    \*.jpm,
    \*.jpx,
    \*.jxl,
    \*.mng,
    \*.pbm,
    \*.pcx,
    \*.pgm,
    \*.png,
    \*.ppm,
    \*.psd,
    \*.tga,
    \*.tif,
    \*.tiff,
    \*.webp,
    \*.xbm,
    \*.xpm
    \ {ImageMagick} display %f %i &,
    \ {Eye of Gnome} eog %f %i &,
    \ {Gwenview} gwenview %f %i &,
    \ {GIMP} gimp %f %i &,
    \ {Krita} krita %f %i &
filextype *.svg,*.svgz
    \ {ImageMagick} display %f %i &,
    \ {Eye of Gnome} eog %f %i &,
    \ {Gwenview} gwenview %f %i &,
    \ {Inkscape} inkscape %f %i &,
    \ {Karbon} karbon %f %i &
fileviewer *.apng,
    \*.bmp,
    \*.gif,
    \*.ico,
    \*.icon,
    \*.j2k,
    \*.jp2,
    \*.jpeg,
    \*.jpf,
    \*.jpg,
    \*.jpm,
    \*.jpx,
    \*.jxl,
    \*.mng,
    \*.pbm,
    \*.pcx,
    \*.pgm,
    \*.png,
    \*.ppm,
    \*.svg,
    \*.svgz,
    \*.tga,
    \*.tif,
    \*.tiff,
    \*.webp,
    \*.xbm,
    \*.xpm
    \ identify -verbose %c
" ]]]

" Archives [[[
filextype *.7z,
    \*.apk,
    \*.cb7,
    \*.cbr,
    \*.cbz,
    \*.deb,
    \*.ear,
    \*.jar,
    \*.oxt
    \*.rar,
    \*.rpm,
    \*.tar.br
    \*.tar.bz2,
    \*.tar.gz,
    \*.tar.xz,
    \*.tar.zst,
    \*.tbz2,
    \*.tgz,
    \*.txz,
    \*.war,
    \*.zip
    \ {Ark} ark %f %i &
filextype *.7z,
    \*.cb7,
    \*.cbr,
    \*.cbz,
    \*.rar,
    \*.zip
    \ {MComix} mcomix %f %i &,
    \ {Zathura} zathura %f %i &
filetype *.7z,*.cb7 {Extract} 7z x %f
filetype *.asar {Extract} asar e %f %f:r
filetype *.rar,*.cbr {Extract} unrar %f
filetype *.rpa {Extract} unrpa -s %f
filetype *.tar {Extract} tar xf %f
filetype *.tar.br {Extract} tar -I brotli -xf %f
filetype *.tar.bz2,*.tbz2 {Extract} tar xjf %f
filetype *.tar.gz,*.tgz {Extract} tar xzf %f
filetype *.tar.xz,*.txz {Extract} tar xJf %f
filetype *.tar.zst {Extract} tar -I zst -xf %f
filetype *.apk,
    \*.cbz,
    \*.ear,
    \*.jar,
    \*.oxt,
    \*.war,
    \*.zip
    \ {Extract} unzip %f
filetype *.pkg.tar,*.pkg.tar.*
    \ {Install} sudo pacman -U %f
fileviewer *.7z,*.cb7 7z l %c
fileviewer *.asar asar l %c
fileviewer *.rar,*.cbr unrar v %c
fileviewer *.rpa unrpa -l %c
fileviewer *.tar tar tf %c
fileviewer *.tar.br,*.tbr tar -I brotli -tf %c
fileviewer *.tar.bz2,*.tbz2 tar tjf %c
fileviewer *.tar.gz,*.tgz tar tzf %c
fileviewer *.tar.xz,*.txz tar tJf %c
fileviewer *.tar.zst,*.tzst tar -I zst -tf %c
fileviewer *.apk,
    \*.cbz,
    \*.ear,
    \*.jar,
    \*.oxt,
    \*.war,
    \*.zip
    \ zip -sf %c
" ]]]

" Web [[[
filextype *.html,*.htm
    \ {qutebrowser} qutebrowser -- %f %i &,
    \ {Firefox} firefox -- %f %i &,
    \ {Chromium} chromium -- %f %i &
" ]]]

" Hashes [[[
filetype *.b2 {Verify} b2sum -c %f %S
filetype *.md5 {Verify} md5sum -c %f %S
filetype *.sha1 {Verify} sha1sum -c %f %S
filetype *.sha256 {Verify} sha256sum -c %f %S
filetype *.sha384 {Verify} sha384sum -c %f %S
filetype *.sha512 {Verify} sha512sum -c %f %S
" ]]]

" Torrents [[[
filetype *.torrent {Aria2} aria2c %f &
filextype *.torrent {qBittorrent} qbittorent %f %i &
fileviewer *.torrent dumptorrent -v %c
" ]]]

" GPG files [[[
filetype *.asc,*.sig {Verify} gpg --verify %c
fileviewer *.gpg gpg --decrypt %c
" ]]]

" Binary files [[[
filextype *.out,*.exe,*.bin,*.run {Okteta} okteta %f %i &
filetype *.class {Decompile} cfr %f --outputdir %d %i &
fileviewer *.out,*.exe,*.bin,*.run xxd -u %c
fileviewer *.class cfr %c
fileviewer *.lnk pylnk3 p %c
fileviewer *.o nm %c
" ]]]

" IDE projects [[[
filextype *.pro
    \ {Qt Creator} qtcreator %f %i &,
    \ {CLion} clion %d %i &
filextype .idea/
    \ {IntelliJ} intellij-idea-ultimate-edition %d %i &,
    \ {CLion} clion %d %i &,
    \ {PhpStorm} phpstorm %d %i &,
    \ {PyCharm} pycharm %d %i &
" ]]]


" Other [[[

" remaining files:
fileviewer *[!/] bat --color always --wrap never --pager never %c -p
fileviewer .*[!/] bat --color always --wrap never --pager never %c -p

" folder view
if executable('exa')
  fileviewer */,.*/ exa --tree --icons %c
elseif executable('tree')
  fileviewer */,.*/ tree -L 2 -I .git %c
endif

filextype */
    \ {Dolphin} dolphin %f %i &,
    \ {Gwenview} gwenview %f %i &,
    \ {MPV} mpv %f &
filetype * {Default} open
" For *nix:
" filetype * xdg-open
" For OS X:
" filetype * open
" For Windows:
" filetype * start, explorer %"f &
" ]]]
" ]]]


" GETTING ICONS TO DISPLAY IN VIFM
" Filetypes
set classify=' :dir:/, :exe:, :reg:, :link:,? :?:, ::../::'

" Dirs
set classify+=' ::.git/::/,
             \  ::.config/::/,
             \  ::Desktop/::/,
             \  ::Documents/::/,
             \  ::Development/::/,
             \  ::Downloads/::/,
             \  ::Dropbox/::/,
             \  ::Google\ Drive/::/,
             \  ::gitrepos/::/,
             \  ::Music/::/,
             \  ::Pictures/::/,
             \  ::Public/::/,
             \  ::Templates/::/,
             \  ::Videos/::/,
             \  ::node_modules/::/'

" Files
set classify+=' ::.Xauthority,,.Xdefaults,,.Xresources,,.bash_aliases,,.bashprofile,,.bash_profile,,.bash_logout,,.bash_history,,.bashrc,,.dmrc,,.DS_Store,,.fasd,,.gitconfig,,.gitattributes,,.gitignore,,.inputrc,,.jack-settings,,.mime.types,,.nvidia-settings-rc,,.pam_environment,,.profile,,.recently-used,,.selected_editor,,.tmux.conf,,.xinitrc,,.xinputrc,,config,,bspwmrc,,sxhkdrc,,Makefile,,Makefile.in,,Makefile.ac,,mimeapps.list,,.zshenv,,.zprofile,,.zshrc,,.zlogin,,.zlogout,,vifmrc,,yabairc,,skhdrc,,ini,,user-dirs.dirs::,
             \  ::.fehbg::,
             \  ::.vim,,.vimrc,,.viminfo,,init.vim::,
             \  ::Dockerfile,,docker-compose.yml::,
             \  ::dropbox::,
             \  ::favicon.ico::,
             \  ::a.out,,configure::,
             \  ::config.mk,,config.m4,,config.ac::,
             \  ::Rakefile::,
             \  ::gruntfile.coffee,,gruntfile.js,,gruntfile.ls::,
             \  ::gulpfile.coffee,,gulpfile.js,,gulpfile.ls::,
             \  ::ledger::,
             \  ::package.json,,package-lock.json,,webpack.config.js::,
             \  ::.ncmpcpp,,playlists::,
             \  ::known_hosts,,authorized_keys,,license,,LICENSE.md,,LICENSE,,LICENSE.txt::,
             \  ::procfile::,
             \  ::react.jsx::,
             \  ::README.rst,,README.md,,README.markdown,,README,,README.txt::'

" Extentions
set classify+=' ::*.7z,,*.apk,,*.bz2,,*.cpio,,*.deb,,*.gz,,*.gzip,,*.gem,,*.lha,,*.lzh,,*.lzma,,*.rar,,*.rpm,,*.tar,,*.tgz,,*.xbps,,*.xz,,*.zip::,
             \  ::*.a,,*.cmake,,*.jl,,*.o,,*.so::,
             \  ::*.ai::,
             \  ::*.asm,,*.css,,*.less,,*.s,,*.sh,,*.zsh::,
             \  ::*.asp,,*.rom,,*.efi,,*.elf,,*.fish::,
             \  ::*.aup,,*.cue,,*.flac,,*.m4a,,*.mp3,,*.ogg,,*.wav::,
             \  ::*.avi,,*.flv,,*.m4v,,*.mkv,,*.mov,,*.mp4,,*.mpeg,,*.mpg,,*.webm::,
             \  ::*.bat,,*.conf,,*.cvs,,*.htaccess,,*.htpasswd,,*.ini,,*.rc,,*.yaml,,*.yml::,
             \  ::*.bmp,,*.gif,,*.ico,,*.jpeg,,*.jpg,,*.png,,*.ppt,,*.pptx::,
             \  ::*.c,,*.h::,
             \  ::*.cbr,,*.cbz::,
             \  ::*.class,,*.jar,,*.java::,
             \  ::*.clj,,*.cljc::,
             \  ::*.cljs,,*.edn::,
             \  ::*.coffee::,
             \  ::*.cs::,
             \  ::*.cxx,,*.c++,,*.cc,,*.cp,,*.cpp::,
             \  ::*.d::,
             \  ::*.dart::,
             \  ::*.db,,*.dump,,*.img,,*.iso,,*.sql::,
             \  ::*.diff::,
             \  ::*.dll,,*.exe,,*.msi::,
             \  ::*.doc,,*.docx,,*.epub,,*.pdf,,*.rtf,,*.xls,,*.xlsx::,
             \  ::*.ejs,,*.htm,,*.html,,*.slim,,*.xhtml,,*.xml::,
             \  ::*.elm::,
             \  ::*.erl,,*.hrl::,
             \  ::*.ex,,*.exs,,*.eex::,
             \  ::*.f#,,*.fs,,*.fsi,,*.fsscript,,*.fsx::,
             \ | ::*.fifo::,
             \  ::*.go::,
             \  ::*.hbs,,*.mustache::,
             \  ::*.hs,,*.lhs::,
             \  ::*.js::,
             \  ::*.json::,
             \  ::*.jsx::,
             \  ::*.key,,*.pub::,
             \  ::*.log::,
             \  ::*.lua::,
             \  ::*.markdown,,*.md::,
             \ λ ::*.ml,,*.mli::,
             \  ::*.php::,
             \  ::*.pl,,*.pm,,*.t::,
             \  ::*.psb,,*.psd::,
             \  ::*.py,,*.pyc,,*.pyd,,*.pyo::,
             \  ::*.rb::,
             \  ::*.rlib,,*.rs::,
             \  ::*.rss::,
             \  ::*.scala::,
             \  ::*.scss::,
             \  ::*.sln,,*.suo::,
             \  ::*.styl::,
             \  ::*.ts::,
             \  ::*.twig::,
             \  ::*.vim,,*.vimrc::,
             \  ::*.xul::'

" ------------------------------------------------------------------------------

" What should be saved automatically between vifm sessions.  Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
" set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
"     \phistory,fhistory,dirstack,registers,bookmarks,bmarks

set vifminfo=dhistory,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks
" ------------------------------------------------------------------------------

" Examples of configuring both panels

" Customize view columns a bit (enable ellipsis for truncated file names)
"
" set viewcolumns=-{name}..,6{}.

" Filter-out build and temporary files
"
" filter! {*.lo,*.o,*.d,*.class,*.pyc,*.pyo,.*~}

" ------------------------------------------------------------------------------

" Sample mappings



" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" Open file in existing instance of gvim
nnoremap o :!nvim %f<cr>

" Open file in the background using its default program
nnoremap gb :file &<cr>l

" Interaction with system clipboard
if has('win')
    " Yank current directory path to Windows clipboard with forward slashes
    nnoremap yp :!echo %"d:gs!\!/! %i | clip<cr>
    " Yank path to current file to Windows clipboard with forward slashes
    nnoremap yf :!echo %"c:gs!\!/! %i | clip<cr>
elseif executable('xclip')
    " Yank current directory path into the clipboard
    nnoremap yd :!echo %d | xclip %i<cr>
    " Yank current file path into the clipboard
    nnoremap yf :!echo %c:p | xclip %i<cr>
elseif executable('xsel')
    " Yank current directory path into primary and selection clipboards
    nnoremap yd :!echo -n %d | xsel --input --primary %i &&
                \ echo -n %d | xsel --clipboard --input %i<cr>
    " Yank current file path into into primary and selection clipboards
    nnoremap yf :!echo -n %c:p | xsel --input --primary %i &&
                \ echo -n %c:p | xsel --clipboard --input %i<cr>
endif

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw
nnoremap cW cw
nnoremap cw cW

" Open console in current directory
nnoremap ,t :!xterm &<cr>

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,c :write | edit $MYVIFMRC | restart full<cr>
" Open gvim to edit vifmrc
nnoremap ,C :!gvim --remote-tab-silent $MYVIFMRC &<cr>

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>

" Example of standard two-panel file managers mappings
nnoremap <f3> :!less %f<cr>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

" Midnight commander alike mappings
" Open current directory in the other pane
nnoremap <a-i> :sync<cr>
" Open directory under cursor in the other pane
nnoremap <a-o> :sync %c<cr>

" Swap panes
" "nnoremap <c-u> <c-w>x

" ------------------------------------------------------------------------------

" Various customization examples

" Use ag (the silver searcher) instead of grep
"
" set grepprg='ag --line-numbers %i %a %s'

" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername

" ------------------------------------------------------------------------------

" Base Settings [[[

" Use ripgrep instead of grep
" set grepprg="rg\ --color=never\ -Hn\ %i\ %a\ %s"
" set findprg="rg --files %s | rg %p"
{{ if eq .chezmoi.os "darwin" -}}
" Use fd instead of find
set findprg=fd\ --color=never\ %p\ %s
{{ else if eq .chezmoi.os "linux" -}}
" Use fd instead of find
set findprg=fdfind\ --color=never\ %p\ %s
{{ end -}}

set showtabline=always

" command to start vim
set vicmd=nvim

" This makes vifm perform file operations on its own
" instead of relying on standard utilities like cp
set syscalls

" Use vim help format
set vimhelp

" When files are deleted they are moved to the trash directory.
" This allows dd and p to move files like in vim, don't remove it.
set trash
set trashdir="~/.local/share/vifm/trash"

" Maximum number of stored items in all histories
set history=100

" Automatically resolve symbolic links on l or Enter.
set nofollowlinks

" With this on you can run partially completed commands
" set fastrun

" Natural sort of (version) numbers within text.
set sortnumbers

" Maximum number of changes that can be undone.
set undolevels=100

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.
set vimhelp

" To run an executable file when you press Enter, l or Right Arrow, set this.
set norunexec

" List of color schemes to try (picks the first one supported by the terminal)
colorscheme dracula

"  Format for displaying time in file list
" See man date or man strftime for details.
set timefmt=%m/%d\ %H:%M

" Show list of matches on tab completion in command-line mode
set wildmenu

" Display completions in a form of popup with descriptions of the matches
set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it has at least one uppercase letter
set ignorecase
set smartcase

" Don't highlight search results automatically
set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists
set scrolloff=8

" Don't do too many requests to slow file systems
if !has('win')
    set slowfs=curlftpfs
endif

" Set custom status line look
" set statusline="  Hint: %z%= %A %10u:%-7g %15s %20d  "
highlight User1 ctermbg=yellow ctermfg=black
highlight User2 ctermbg=none ctermfg=blue cterm=bold
highlight User3 ctermbg=none ctermfg=red cterm=bold
highlight User4 ctermbg=none ctermfg=yellow cterm=bold
highlight User5 ctermbg=none ctermfg=purple

" Set custom status line look
" %N after size would be a newline"
set statusline="%1* %-10t %2* owner:%u:%-7g %5* size:%s %3* attr:%A %4* %20d "


" Single pane when started via vim plugin
if $MYVIMRC != '' | only | endif
" ]]]

" ------------------------------------------------------------------------------

